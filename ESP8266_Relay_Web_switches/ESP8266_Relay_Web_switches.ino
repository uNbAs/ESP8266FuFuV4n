#include <ESP8266WiFi.h>
#include <ESP8266WebServerSecure.h>
#include <EEPROM.h>
#include <CertStoreBearSSL.h>

// Configuración para reducir memoria
#define USE_LWIP_HIGH_PERFORMANCE 1
#define LWIP_HTTPD_SUPPORT_11_KEEPALIVE 0

// Configuración WiFi
const char* ssid = "TUSSID";
const char* password = "TUPASSWORD";

// Configuración de pines
#define NUM_RELAYS 6
const uint8_t relayPins[NUM_RELAYS] = {D1, D2, D3, D4, D5, D6};

// Certificados (generar con los pasos posteriores)
static const uint8_t cert[] PROGMEM = {
  0x30, 0x82, 0x03, 0x05, 0x30, 0x82, 0x01, 0xed, 0xa0, 0x03, 0x02, 0x01,
  0x02, 0x02, 0x14, 0x1d, 0x61, 0x82, 0x36, 0x60, 0x31, 0x47, 0x8c, 0xa8,
  0xec, 0x1e, 0x08, 0xee, 0x27, 0x13, 0x06, 0x0e, 0x70, 0xd5, 0x68, 0x30,
  0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b,
  0x05, 0x00, 0x30, 0x12, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04,
  0x03, 0x0c, 0x07, 0x45, 0x53, 0x50, 0x38, 0x32, 0x36, 0x36, 0x30, 0x1e,
  0x17, 0x0d, 0x32, 0x35, 0x30, 0x33, 0x31, 0x39, 0x31, 0x30, 0x33, 0x36,
  0x32, 0x39, 0x5a, 0x17, 0x0d, 0x32, 0x36, 0x30, 0x33, 0x31, 0x39, 0x31,
  0x30, 0x33, 0x36, 0x32, 0x39, 0x5a, 0x30, 0x12, 0x31, 0x10, 0x30, 0x0e,
  0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x07, 0x45, 0x53, 0x50, 0x38, 0x32,
  0x36, 0x36, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86,
  0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01,
  0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xd3,
  0xfe, 0x64, 0x16, 0xca, 0x30, 0x46, 0x95, 0xac, 0x19, 0xf1, 0xac, 0x83,
  0x31, 0x09, 0xe7, 0x63, 0xb3, 0x4a, 0x4a, 0x1c, 0x3f, 0x1d, 0xbd, 0xdd,
  0xa0, 0x47, 0x6d, 0x6a, 0x45, 0x16, 0x43, 0x3a, 0xea, 0xe4, 0xc1, 0xab,
  0x0b, 0x46, 0xc2, 0xd4, 0xe1, 0x98, 0x56, 0x39, 0x56, 0x09, 0x05, 0x25,
  0xaa, 0xdc, 0x73, 0x1a, 0x21, 0x7d, 0xbd, 0x60, 0xca, 0x6f, 0x55, 0xcf,
  0x94, 0xee, 0x24, 0x99, 0x6e, 0xca, 0x84, 0x8e, 0x29, 0x23, 0x92, 0x5d,
  0x89, 0x57, 0x9f, 0x1d, 0xd7, 0x81, 0x46, 0x99, 0x6e, 0x2d, 0x74, 0x72,
  0x3c, 0x95, 0xb5, 0xa3, 0x71, 0x0f, 0xe3, 0x9b, 0x64, 0x84, 0xe3, 0x85,
  0xc5, 0x75, 0xd6, 0x03, 0x1e, 0xc2, 0xe0, 0x79, 0x74, 0x31, 0xdf, 0x72,
  0xd6, 0x97, 0x42, 0x29, 0x6b, 0x35, 0x69, 0x7f, 0x2c, 0x1e, 0x16, 0xfc,
  0xe0, 0xb8, 0x13, 0xb9, 0x09, 0xf1, 0x14, 0x2e, 0x71, 0xb5, 0xcf, 0x2e,
  0x70, 0x1a, 0xef, 0xd9, 0xa5, 0x1a, 0xa5, 0x35, 0x93, 0x57, 0xfc, 0x1a,
  0x60, 0x42, 0x3c, 0x01, 0xe0, 0x7c, 0x8f, 0x70, 0xff, 0x08, 0x19, 0x12,
  0xe7, 0x27, 0x59, 0xcf, 0x2a, 0x4a, 0xdc, 0x7c, 0x63, 0x26, 0xf7, 0xbb,
  0xed, 0x2c, 0x54, 0x53, 0x36, 0xb0, 0x13, 0x3f, 0xd1, 0xc5, 0x1d, 0xab,
  0x5b, 0x29, 0x67, 0xa0, 0x02, 0x89, 0xc4, 0x24, 0x8b, 0xe4, 0xef, 0x37,
  0x99, 0x1c, 0x8c, 0x04, 0xde, 0xf1, 0x98, 0x2c, 0x3a, 0x88, 0x3e, 0x13,
  0xb3, 0x6b, 0x63, 0x84, 0x70, 0xeb, 0x22, 0x8d, 0x8e, 0x22, 0xef, 0xdb,
  0xd6, 0x12, 0xaa, 0x95, 0x9f, 0x54, 0xd7, 0x17, 0x4b, 0x2a, 0x99, 0xbc,
  0x0c, 0x9c, 0x8d, 0x5b, 0xa9, 0x49, 0xc8, 0xf0, 0x7d, 0xde, 0x3a, 0x5f,
  0xe4, 0xdf, 0xaa, 0x6b, 0xf8, 0x48, 0xa0, 0xf1, 0x1e, 0x91, 0x16, 0x71,
  0xa2, 0x3f, 0x47, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x53, 0x30, 0x51,
  0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xe7,
  0x3a, 0xce, 0xbc, 0x8b, 0x4e, 0x25, 0x01, 0xab, 0x44, 0xb0, 0x8a, 0xa5,
  0xe4, 0x1a, 0xa8, 0x18, 0xca, 0xf5, 0xa9, 0x30, 0x1f, 0x06, 0x03, 0x55,
  0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xe7, 0x3a, 0xce, 0xbc,
  0x8b, 0x4e, 0x25, 0x01, 0xab, 0x44, 0xb0, 0x8a, 0xa5, 0xe4, 0x1a, 0xa8,
  0x18, 0xca, 0xf5, 0xa9, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01,
  0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0d, 0x06,
  0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00,
  0x03, 0x82, 0x01, 0x01, 0x00, 0xa0, 0xe0, 0x85, 0xd0, 0xfe, 0xcd, 0x48,
  0xa5, 0x7a, 0xf2, 0x63, 0x8f, 0x7e, 0x8e, 0xb4, 0x09, 0x11, 0x08, 0xd2,
  0x97, 0x23, 0x85, 0x75, 0xcb, 0x38, 0x5a, 0x23, 0x35, 0x4a, 0x42, 0xc9,
  0xcc, 0xe6, 0x43, 0x8d, 0x60, 0xe6, 0x5b, 0x13, 0x7e, 0x75, 0x0c, 0x81,
  0x3f, 0x75, 0xbd, 0xf2, 0x60, 0x9d, 0xdf, 0x9c, 0xa9, 0x3f, 0xfb, 0x1a,
  0xd8, 0xdb, 0x6b, 0xa5, 0xa5, 0x5b, 0x50, 0xe5, 0x51, 0xe2, 0xb1, 0x97,
  0xa9, 0xa7, 0xa9, 0x3e, 0xfd, 0xc5, 0x42, 0x63, 0x2c, 0x23, 0xa4, 0x33,
  0xcc, 0xda, 0x5a, 0x0b, 0x55, 0x85, 0xad, 0xa0, 0xa8, 0x1a, 0x27, 0xa8,
  0x7c, 0x54, 0x94, 0xdd, 0x1c, 0xdc, 0xcd, 0x44, 0x5e, 0x05, 0xb3, 0xbd,
  0xf2, 0xd9, 0x38, 0x24, 0xab, 0x71, 0xf1, 0xd7, 0x4d, 0x58, 0xb9, 0x17,
  0x65, 0x06, 0x53, 0x26, 0x8d, 0xbd, 0x0a, 0x49, 0x28, 0x68, 0xe1, 0xb1,
  0x0a, 0x61, 0x5c, 0xba, 0xbe, 0xfe, 0xba, 0x5e, 0xd6, 0x1a, 0xef, 0xbb,
  0x48, 0xac, 0xb7, 0x19, 0x12, 0xa4, 0xf0, 0x8b, 0xf6, 0x04, 0x6b, 0x52,
  0x7e, 0x02, 0x3d, 0xfc, 0xed, 0x65, 0x8b, 0x58, 0x19, 0x60, 0x2b, 0x9b,
  0xf8, 0x51, 0x30, 0x32, 0xb8, 0xd2, 0x0d, 0x75, 0x8e, 0x1c, 0x66, 0xa7,
  0x12, 0x86, 0x50, 0x18, 0xdd, 0x01, 0x46, 0x8e, 0x3c, 0xbe, 0x6c, 0xf1,
  0x82, 0xac, 0xc8, 0xf7, 0x44, 0x5c, 0x48, 0x22, 0x5c, 0x2b, 0xa5, 0x2a,
  0x80, 0xfe, 0xef, 0x03, 0xb0, 0xf3, 0x89, 0x54, 0xce, 0x0b, 0xbb, 0x25,
  0xe7, 0x4b, 0xc0, 0x1d, 0xbd, 0xea, 0x22, 0x0c, 0x11, 0x58, 0x8d, 0x6c,
  0x54, 0xf4, 0x51, 0xf3, 0x2d, 0x93, 0x00, 0xf3, 0x89, 0x1a, 0x2a, 0x5a,
  0x70, 0x34, 0xb2, 0x17, 0x89, 0x38, 0x75, 0xca, 0x9c, 0x26, 0xc6, 0xd2,
  0xa9, 0x2d, 0x85, 0xd1, 0xfb, 0x53, 0xd7, 0x1b, 0xc4
};

static const uint8_t key[] PROGMEM = {
  0x30, 0x82, 0x04, 0xbe, 0x02, 0x01, 0x00, 0x30, 0x0d, 0x06, 0x09, 0x2a,
  0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82,
  0x04, 0xa8, 0x30, 0x82, 0x04, 0xa4, 0x02, 0x01, 0x00, 0x02, 0x82, 0x01,
  0x01, 0x00, 0xd3, 0xfe, 0x64, 0x16, 0xca, 0x30, 0x46, 0x95, 0xac, 0x19,
  0xf1, 0xac, 0x83, 0x31, 0x09, 0xe7, 0x63, 0xb3, 0x4a, 0x4a, 0x1c, 0x3f,
  0x1d, 0xbd, 0xdd, 0xa0, 0x47, 0x6d, 0x6a, 0x45, 0x16, 0x43, 0x3a, 0xea,
  0xe4, 0xc1, 0xab, 0x0b, 0x46, 0xc2, 0xd4, 0xe1, 0x98, 0x56, 0x39, 0x56,
  0x09, 0x05, 0x25, 0xaa, 0xdc, 0x73, 0x1a, 0x21, 0x7d, 0xbd, 0x60, 0xca,
  0x6f, 0x55, 0xcf, 0x94, 0xee, 0x24, 0x99, 0x6e, 0xca, 0x84, 0x8e, 0x29,
  0x23, 0x92, 0x5d, 0x89, 0x57, 0x9f, 0x1d, 0xd7, 0x81, 0x46, 0x99, 0x6e,
  0x2d, 0x74, 0x72, 0x3c, 0x95, 0xb5, 0xa3, 0x71, 0x0f, 0xe3, 0x9b, 0x64,
  0x84, 0xe3, 0x85, 0xc5, 0x75, 0xd6, 0x03, 0x1e, 0xc2, 0xe0, 0x79, 0x74,
  0x31, 0xdf, 0x72, 0xd6, 0x97, 0x42, 0x29, 0x6b, 0x35, 0x69, 0x7f, 0x2c,
  0x1e, 0x16, 0xfc, 0xe0, 0xb8, 0x13, 0xb9, 0x09, 0xf1, 0x14, 0x2e, 0x71,
  0xb5, 0xcf, 0x2e, 0x70, 0x1a, 0xef, 0xd9, 0xa5, 0x1a, 0xa5, 0x35, 0x93,
  0x57, 0xfc, 0x1a, 0x60, 0x42, 0x3c, 0x01, 0xe0, 0x7c, 0x8f, 0x70, 0xff,
  0x08, 0x19, 0x12, 0xe7, 0x27, 0x59, 0xcf, 0x2a, 0x4a, 0xdc, 0x7c, 0x63,
  0x26, 0xf7, 0xbb, 0xed, 0x2c, 0x54, 0x53, 0x36, 0xb0, 0x13, 0x3f, 0xd1,
  0xc5, 0x1d, 0xab, 0x5b, 0x29, 0x67, 0xa0, 0x02, 0x89, 0xc4, 0x24, 0x8b,
  0xe4, 0xef, 0x37, 0x99, 0x1c, 0x8c, 0x04, 0xde, 0xf1, 0x98, 0x2c, 0x3a,
  0x88, 0x3e, 0x13, 0xb3, 0x6b, 0x63, 0x84, 0x70, 0xeb, 0x22, 0x8d, 0x8e,
  0x22, 0xef, 0xdb, 0xd6, 0x12, 0xaa, 0x95, 0x9f, 0x54, 0xd7, 0x17, 0x4b,
  0x2a, 0x99, 0xbc, 0x0c, 0x9c, 0x8d, 0x5b, 0xa9, 0x49, 0xc8, 0xf0, 0x7d,
  0xde, 0x3a, 0x5f, 0xe4, 0xdf, 0xaa, 0x6b, 0xf8, 0x48, 0xa0, 0xf1, 0x1e,
  0x91, 0x16, 0x71, 0xa2, 0x3f, 0x47, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02,
  0x82, 0x01, 0x00, 0x31, 0x4b, 0xa4, 0xeb, 0x95, 0xbd, 0x8f, 0x14, 0x4b,
  0xce, 0x46, 0x9f, 0xe6, 0x6b, 0xd7, 0x51, 0x3a, 0xa2, 0x5c, 0xe2, 0x89,
  0xd9, 0xf5, 0x69, 0x0a, 0xa9, 0xb4, 0x22, 0x51, 0xc5, 0x59, 0xed, 0x6d,
  0x3c, 0x64, 0xd0, 0x52, 0x1d, 0x4f, 0xa9, 0x8b, 0x86, 0x1f, 0xfd, 0xe0,
  0xdc, 0x4c, 0x41, 0xa9, 0xa6, 0x27, 0x18, 0x0e, 0xd9, 0xfd, 0xda, 0xb5,
  0x30, 0xad, 0x9e, 0x07, 0x24, 0xab, 0x11, 0xd0, 0xa9, 0xee, 0x26, 0xcf,
  0xc5, 0xea, 0x33, 0x25, 0x54, 0x04, 0x0f, 0x88, 0x89, 0x6d, 0xd2, 0xc4,
  0x67, 0xd5, 0xe3, 0x0f, 0x93, 0x5d, 0xfe, 0xbc, 0x50, 0x54, 0xb1, 0x09,
  0x17, 0xe1, 0x3c, 0xe5, 0x04, 0xeb, 0x27, 0x46, 0x57, 0x77, 0x5a, 0x6a,
  0x73, 0xa6, 0x0b, 0x3f, 0x31, 0x7e, 0x3f, 0xd0, 0xd0, 0xd0, 0xbd, 0x44,
  0xe8, 0xb5, 0xe0, 0x83, 0x92, 0x1f, 0xcb, 0xda, 0x49, 0xe1, 0x08, 0x73,
  0x34, 0x42, 0x39, 0x7c, 0x9e, 0xdd, 0xc5, 0x0b, 0xd9, 0xf4, 0xfc, 0xd4,
  0x3e, 0xec, 0x60, 0xbd, 0xe3, 0xdb, 0xfb, 0x76, 0xbc, 0x81, 0xc1, 0x6b,
  0x32, 0x0e, 0x60, 0xdc, 0xb0, 0x6c, 0x10, 0x75, 0x82, 0x63, 0x7c, 0xc5,
  0x43, 0xdf, 0x3c, 0x9c, 0x49, 0xae, 0x4d, 0x77, 0xc7, 0xd4, 0xba, 0xea,
  0x8b, 0x9b, 0x47, 0x81, 0x30, 0x52, 0x22, 0x39, 0x09, 0x21, 0xd2, 0xe6,
  0xd1, 0xf1, 0xca, 0x40, 0x73, 0x1c, 0xa2, 0xfc, 0xff, 0x32, 0x20, 0x68,
  0x27, 0x43, 0x78, 0xf3, 0x90, 0x85, 0x69, 0x19, 0xa8, 0x63, 0x8f, 0x43,
  0xd6, 0x3c, 0xc8, 0xb8, 0x2e, 0x95, 0xfc, 0x07, 0xb3, 0x67, 0x03, 0xeb,
  0x7b, 0xe6, 0x15, 0x98, 0x85, 0x05, 0xa9, 0xee, 0x5d, 0xf7, 0x81, 0x50,
  0x2e, 0x95, 0x12, 0x42, 0x47, 0x1c, 0xa1, 0x11, 0x8b, 0x6b, 0x59, 0xcb,
  0x64, 0x2f, 0x50, 0x38, 0xc6, 0x94, 0xc1, 0x02, 0x81, 0x81, 0x00, 0xfb,
  0x1e, 0xea, 0x7b, 0x54, 0x64, 0x93, 0x85, 0x0e, 0x58, 0x23, 0xc8, 0xcb,
  0x7e, 0x5f, 0x20, 0x45, 0x6d, 0x66, 0x0c, 0xa9, 0x36, 0x85, 0x86, 0x52,
  0x8c, 0x3a, 0x35, 0xe7, 0xc8, 0xdf, 0xea, 0xaf, 0xf4, 0x31, 0xec, 0x03,
  0x7f, 0xaf, 0x73, 0xb0, 0xfd, 0x0f, 0xba, 0x16, 0x49, 0x7c, 0x7b, 0xc7,
  0xb0, 0x70, 0x4e, 0xd3, 0x95, 0xe2, 0xdd, 0xcb, 0x1e, 0x42, 0xf9, 0x2d,
  0x26, 0xef, 0x92, 0xc0, 0x6e, 0xe1, 0x4b, 0xda, 0x37, 0x28, 0x04, 0x09,
  0x96, 0xad, 0xda, 0x84, 0x83, 0x03, 0x05, 0x93, 0xad, 0x90, 0x11, 0x6b,
  0xef, 0xdc, 0xe1, 0x0f, 0x44, 0x22, 0x7d, 0x80, 0x2a, 0x9d, 0x08, 0x72,
  0x07, 0xdd, 0xea, 0x40, 0x94, 0x67, 0x9e, 0xdc, 0x07, 0x07, 0x3d, 0x12,
  0x8a, 0x16, 0xd2, 0x5a, 0x03, 0xe6, 0xfb, 0xed, 0xb0, 0x80, 0x0f, 0xeb,
  0x3f, 0xe8, 0x9b, 0xab, 0x7d, 0xbf, 0xc1, 0x02, 0x81, 0x81, 0x00, 0xd8,
  0x1c, 0xdb, 0x09, 0xd2, 0xd5, 0x23, 0x2e, 0xa9, 0x7c, 0x3c, 0xe3, 0x91,
  0x0c, 0xd2, 0xa1, 0x8d, 0xb2, 0x43, 0x88, 0x30, 0x8e, 0xe0, 0xab, 0x73,
  0x9b, 0xce, 0xda, 0xcb, 0x13, 0xa6, 0x56, 0xc3, 0x4f, 0x3e, 0xa8, 0x58,
  0x05, 0x1d, 0x37, 0x4c, 0x70, 0x48, 0x4a, 0xf2, 0xa9, 0xfb, 0x7b, 0x0e,
  0xf6, 0x8e, 0x95, 0x9a, 0x48, 0x66, 0x1a, 0x1a, 0x2d, 0xea, 0x37, 0x4c,
  0x13, 0xf4, 0x57, 0x72, 0x76, 0xb4, 0x77, 0x72, 0xb5, 0x93, 0xad, 0xd9,
  0x5a, 0x9c, 0x16, 0x96, 0x94, 0xb4, 0x08, 0x96, 0x1e, 0x6c, 0xc5, 0x18,
  0x49, 0x63, 0x99, 0x3e, 0x7d, 0xf6, 0x47, 0xc8, 0x26, 0x8d, 0x19, 0xa2,
  0x44, 0x75, 0x1e, 0x93, 0xbd, 0xc8, 0x6a, 0x17, 0xb8, 0x67, 0x07, 0x23,
  0xa8, 0xc0, 0xb6, 0xfe, 0xb9, 0x8e, 0x2f, 0x4f, 0x2d, 0x81, 0x08, 0xfc,
  0x29, 0x1d, 0x23, 0x54, 0x02, 0x41, 0x07, 0x02, 0x81, 0x81, 0x00, 0xef,
  0x2e, 0x5a, 0x1d, 0xcf, 0x9a, 0xe0, 0x1b, 0x2a, 0x37, 0x6f, 0x15, 0xf0,
  0x24, 0x54, 0x4c, 0x73, 0x74, 0x28, 0x6f, 0xc4, 0xb7, 0xc6, 0x63, 0xd2,
  0xb9, 0xf7, 0x33, 0xa2, 0xa9, 0xe4, 0x04, 0x2f, 0x45, 0x02, 0x4b, 0x8e,
  0x65, 0x8e, 0x62, 0x3d, 0xe0, 0x3a, 0x9b, 0x7e, 0x60, 0xcd, 0xed, 0x43,
  0x9c, 0x5c, 0xcb, 0xe7, 0xa1, 0x6a, 0x6c, 0xdf, 0xea, 0xd9, 0xd5, 0x65,
  0x59, 0x21, 0x74, 0x80, 0x4e, 0xdb, 0xcd, 0x98, 0x71, 0x52, 0x6e, 0xce,
  0x07, 0x33, 0x5d, 0xdf, 0x3a, 0xbd, 0xa5, 0x11, 0x2c, 0x8d, 0xfc, 0xd9,
  0xf6, 0xa3, 0x45, 0xc5, 0x79, 0x9a, 0xf4, 0x38, 0x1f, 0xde, 0x63, 0xcd,
  0xe0, 0x8a, 0x50, 0x74, 0xe4, 0x24, 0xf1, 0xdd, 0x15, 0xe0, 0xa2, 0x1d,
  0xc7, 0x62, 0xc7, 0x45, 0xaf, 0x53, 0xd0, 0xfe, 0x6a, 0x4e, 0xff, 0x5a,
  0x8d, 0x0b, 0x6b, 0x41, 0xe2, 0xca, 0xc1, 0x02, 0x81, 0x80, 0x05, 0x99,
  0x69, 0xcb, 0x6d, 0x5c, 0xfc, 0x56, 0x5f, 0x29, 0xca, 0xe2, 0x12, 0x86,
  0x04, 0x87, 0x0f, 0x06, 0xc9, 0x5d, 0x23, 0xf4, 0xef, 0xb9, 0x41, 0x7b,
  0x8d, 0xf6, 0x79, 0x40, 0x7f, 0x14, 0xcc, 0x66, 0xa7, 0x36, 0xf1, 0x60,
  0xe0, 0x8a, 0xe8, 0x3e, 0x18, 0x81, 0x68, 0x9c, 0x22, 0xd9, 0xe3, 0x5f,
  0x5b, 0xfe, 0x60, 0x4a, 0xf3, 0xea, 0x45, 0x37, 0x5f, 0x54, 0x23, 0x72,
  0x78, 0xe8, 0x33, 0x1d, 0x04, 0x3b, 0xfc, 0x0a, 0xdc, 0x52, 0xaa, 0xc9,
  0x00, 0x36, 0x4d, 0x9c, 0x78, 0xb5, 0xa8, 0x3e, 0x0d, 0x8f, 0x65, 0xbb,
  0xb1, 0x0a, 0xed, 0x65, 0x92, 0x15, 0xf6, 0x07, 0x99, 0xac, 0x4a, 0x59,
  0xff, 0xb6, 0xd5, 0x19, 0x1b, 0xb2, 0x33, 0xff, 0x21, 0x1c, 0x3c, 0x3e,
  0x49, 0x0f, 0xf4, 0xb5, 0x96, 0x0b, 0x7f, 0xbf, 0xac, 0x12, 0x31, 0x86,
  0x57, 0x2c, 0xed, 0x26, 0x49, 0xcd, 0x02, 0x81, 0x81, 0x00, 0x9a, 0x67,
  0xdf, 0x68, 0x41, 0x10, 0x7c, 0xcc, 0x1e, 0xee, 0xc7, 0xcb, 0x00, 0x3f,
  0xab, 0xbb, 0x14, 0x81, 0x54, 0xb7, 0xd0, 0x24, 0xb2, 0x4b, 0x1f, 0x8f,
  0xd7, 0x1b, 0x51, 0xf4, 0x1a, 0x81, 0x22, 0xa7, 0xff, 0xab, 0x62, 0xe4,
  0x72, 0xf5, 0x9a, 0x15, 0x0c, 0x6d, 0x67, 0x83, 0xe5, 0xe1, 0x52, 0x38,
  0xc6, 0x52, 0x68, 0x2b, 0x88, 0x19, 0x7a, 0xd7, 0xad, 0xb4, 0x88, 0xb1,
  0x78, 0x90, 0x77, 0xf1, 0x23, 0xb4, 0x1b, 0x4b, 0x8f, 0x7a, 0x70, 0x37,
  0xce, 0x5a, 0xcf, 0xbc, 0xee, 0x54, 0xcd, 0xa3, 0x49, 0x4a, 0xac, 0x0a,
  0xd2, 0x64, 0x55, 0xb9, 0xf4, 0x75, 0xd3, 0x30, 0x38, 0x22, 0xaa, 0xa2,
  0x7a, 0x31, 0x7a, 0x56, 0x15, 0xb3, 0x71, 0x0c, 0x9f, 0x9e, 0x3c, 0x8d,
  0x7f, 0x22, 0x8f, 0xcb, 0x1a, 0x88, 0x71, 0xbf, 0x69, 0xc7, 0x68, 0x5d,
  0x88, 0x21, 0xf3, 0x9b, 0x87, 0x38
};

// Servidores
ESP8266WebServer serverHTTP(80);
BearSSL::ESP8266WebServerSecure serverHTTPS(443);
BearSSL::CertStore certStore;
bool relayStates[NUM_RELAYS] = {false};

void setup() {
  Serial.begin(115200);
  serverHTTP.begin();
  serverHTTPS.begin();

  // Inicializar EEPROM
  EEPROM.begin(512);
  for(int i=0; i<NUM_RELAYS; i++) {
    relayStates[i] = EEPROM.read(i);
    pinMode(relayPins[i], OUTPUT);
    digitalWrite(relayPins[i], relayStates[i]);
  }

  // Configurar SSL
  BearSSL::X509List *serverCertList = new BearSSL::X509List(cert, sizeof(cert));
  BearSSL::PrivateKey *serverPrivateKey = new BearSSL::PrivateKey(key, sizeof(key));
  serverHTTPS.setRSACert(serverCertList, serverPrivateKey);
  serverHTTPS.begin();

  // Conectar a WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) delay(500);
  Serial.print("\nConectado! IP: ");
  Serial.println(WiFi.localIP());

  serverHTTP.onNotFound([](){
  String redirectUrl = "https://" + WiFi.localIP().toString() + serverHTTP.uri();
  serverHTTP.sendHeader("Location", redirectUrl);
  serverHTTP.send(301, "text/plain", "Redirigiendo a HTTPS...");
});

  // Configurar rutas
  serverHTTPS.on("/", []() {
    String html = R"=====(
    <!DOCTYPE html>
    <html>
    <head>
      <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
      <style>
        * { box-sizing: border-box; font-family: -apple-system, sans-serif; }
        body { margin: 0; padding: 20px; background: #f8f9fa; }
        .container {
          display: grid;
          grid-template-columns: repeat(2, 1fr);
          gap: 15px;
          max-width: 428px;
          margin: 0 auto;
        }
        .switch-btn {
          background: #ffffff;
          border-radius: 14px;
          padding: 18px;
          box-shadow: 0 2px 8px rgba(0,0,0,0.05);
          display: flex;
          align-items: center;
          justify-content: space-between;
        }
        .switch {
          position: relative;
          display: inline-block;
          width: 52px;
          height: 32px;
        }
        .switch input { opacity: 0; }
        .slider {
          position: absolute;
          cursor: pointer;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: #e9ecef;
          transition: .4s;
          border-radius: 16px;
        }
        .slider:before {
          position: absolute;
          content: "";
          height: 24px;
          width: 24px;
          left: 4px;
          bottom: 4px;
          background: white;
          transition: .4s;
          border-radius: 50%;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        input:checked + .slider { background: #007aff; }
        input:checked + .slider:before { transform: translateX(20px); }
        .label { font-size: 17px; color: #1c1c1e; font-weight: 500; }
        h1 { text-align: center; color: #1c1c1e; font-size: 24px; margin: 0 0 30px; }
        @media (max-width: 480px) { .container { grid-template-columns: 1fr; } }
      </style>
    </head>
    <body>
      <h1>Control FuFuv4N</h1>
      <div class="container">
        <div class="switch-btn"><span class="label">Luz Interior</span><label class="switch"><input type="checkbox" id="relay1"><span class="slider"></span></label></div>
        <div class="switch-btn"><span class="label">Calefaccion</span><label class="switch"><input type="checkbox" id="relay2"><span class="slider"></span></label></div>
        <div class="switch-btn"><span class="label">Corriente 12V</span><label class="switch"><input type="checkbox" id="relay3"><span class="slider"></span></label></div>
        <div class="switch-btn"><span class="label">Inverter</span><label class="switch"><input type="checkbox" id="relay4"><span class="slider"></span></label></div>
        <div class="switch-btn"><span class="label">Agua</span><label class="switch"><input type="checkbox" id="relay5"><span class="slider"></span></label></div>
        <div class="switch-btn"><span class="label">Ducha</span><label class="switch"><input type="checkbox" id="relay6"><span class="slider"></span></label></div>
      </div>
      <script>
        const updateStatus = () => {
          fetch('/status')
            .then(r => r.json())
            .then(data => {
              for(let i=1; i<=6; i++) {
                document.getElementById('relay'+i).checked = data['relay'+i];
              }
            });
        };

        document.querySelectorAll('input[type="checkbox"]').forEach(el => {
          el.addEventListener('click', e => {
            fetch('/relay' + e.target.id.replace('relay',''))
              .then(r => r.text())
              .then(updateStatus);
          });
        });

        setInterval(updateStatus, 1000);
        updateStatus();
      </script>
    </body>
    </html>
    )=====";
    serverHTTPS.send(200, "text/html", html);
  });

  for(int i=1; i<=NUM_RELAYS; i++) {
    serverHTTPS.on(("/relay"+String(i)).c_str(), [i](){
      relayStates[i-1] = !relayStates[i-1];
      digitalWrite(relayPins[i-1], relayStates[i-1]);
      EEPROM.write(i-1, relayStates[i-1]);
      EEPROM.commit();
      serverHTTPS.send(200, "text/plain", "OK");
    });
  }

  serverHTTPS.on("/status", []() {
    String json = "{";
    for(int i=0; i<NUM_RELAYS; i++) {
      json += "\"relay" + String(i+1) + "\":" + String(relayStates[i] ? "true" : "false");
      if(i < NUM_RELAYS-1) json += ",";
    }
    json += "}";
    serverHTTPS.send(200, "application/json", json);
  });
}

void loop() {
  serverHTTP.handleClient();
  serverHTTPS.handleClient();
}
